{"version":3,"sources":["utils/pinata.js","utils/interact.js","components/nftcard.jsx","Minter.js","utils/fetchNFTs.js","App.js","reportWebVitals.js","index.js"],"names":["require","config","key","process","REACT_APP_PINATA_KEY","secret","REACT_APP_PINATA_SECRET","axios","pinJSONToIPFS","JSONBody","post","headers","pinata_api_key","pinata_secret_api_key","then","response","success","pinataUrl","data","IpfsHash","catch","error","console","log","message","web3","createAlchemyWeb3","contractABI","contractAddress","endpoint","connectWallet","window","ethereum","request","method","addressArray","obj","status","address","target","href","getCurrentWalletConnected","length","mintNFT","url","name","description","trim","metadata","Object","image","pinataResponse","tokenURI","eth","Contract","contract","transactionParameters","to","from","selectedAddress","methods","encodeABI","params","txHash","fetchNFTs","owner","setNFTs","retryAttempt","fetch","json","ownedNfts","NftCard","id","title","attributes","className","src","slice","map","attribute","trait_type","value","Minter","props","useState","walletAddress","setWallet","setStatus","setName","setDescription","setURL","NFTs","useEffect","addWalletListener","connectWalletPressed","walletResponse","onMintPressed","on","accounts","onClick","String","substring","type","placeholder","onChange","event","NFT","media","gateway","tokenId","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.27847cfa.chunk.js","sourcesContent":["require('dotenv').config();\r\nconst key = process.env.REACT_APP_PINATA_KEY;\r\nconst secret = process.env.REACT_APP_PINATA_SECRET;\r\n\r\nconst axios = require('axios');\r\n\r\nexport const pinJSONToIPFS = async(JSONBody) => {\r\n    const url = `https://api.pinata.cloud/pinning/pinJSONToIPFS`;\r\n    //making axios POST request to Pinata ⬇️\r\n    return axios \r\n        .post(url, JSONBody, {\r\n            headers: {\r\n                pinata_api_key: key,\r\n                pinata_secret_api_key: secret,\r\n            }\r\n        })\r\n        .then(function (response) {\r\n           return {\r\n               success: true,\r\n               pinataUrl: \"https://gateway.pinata.cloud/ipfs/\" + response.data.IpfsHash\r\n           };\r\n        })\r\n        .catch(function (error) {\r\n            console.log(error)\r\n            return {\r\n                success: false,\r\n                message: error.message,\r\n            }\r\n\r\n    });\r\n};","import {pinJSONToIPFS} from './pinata.js'\r\nrequire('dotenv').config();\r\n// const alchemyKey = process.env.REACT_APP_ALCHEMY_KEY;\r\nconst alchemyKey = 'https://eth-ropsten.alchemyapi.io/v2/HUwsHlHESRAQuOHJ0qTVfet2P2g644V6';\r\nconst { createAlchemyWeb3 } = require(\"@alch/alchemy-web3\");\r\nconst web3 = createAlchemyWeb3(alchemyKey); \r\n\r\nconst contractABI = require('../contract-abi.json')\r\nconst contractAddress = \"0x7fFE2FdA8c162b84842E7Ddd08fc0CBbdce925f3\";\r\n\r\nconst apiKey = \"HUwsHlHESRAQuOHJ0qTVfet2P2g644V6\";\r\nconst endpoint = `https://polygon-mumbai.g.alchemy.com/v2/${apiKey}`;\r\n\r\nexport const connectWallet = async () => {\r\n    if (window.ethereum) {\r\n      try {\r\n        const addressArray = await window.ethereum.request({\r\n          method: \"eth_requestAccounts\",\r\n        });\r\n        const obj = {\r\n          status: \"👆🏽 Write a message in the text-field above.\",\r\n          address: addressArray[0],\r\n        };\r\n        return obj;\r\n      } catch (err) {\r\n        return {\r\n          address: \"\",\r\n          status: \"😥 \" + err.message,\r\n        };\r\n      }\r\n    } else {\r\n      return {\r\n        address: \"\",\r\n        status: (\r\n          <span>\r\n            <p>\r\n              {\" \"}\r\n              🦊{\" \"}\r\n              <a target=\"_blank\" href={`https://metamask.io/download.html`}>\r\n                You must install Metamask, a virtual Ethereum wallet, in your\r\n                browser.\r\n              </a>\r\n            </p>\r\n          </span>\r\n        ),\r\n      };\r\n    }\r\n  };\r\nexport const getCurrentWalletConnected = async () => {\r\nif (window.ethereum) {\r\n    try {\r\n    const addressArray = await window.ethereum.request({\r\n        method: \"eth_accounts\",\r\n    });\r\n    if (addressArray.length > 0) {\r\n        return {\r\n        address: addressArray[0],\r\n        status: \"👆🏽 Write a message in the text-field above.\",\r\n        };\r\n    } else {\r\n        return {\r\n        address: \"\",\r\n        status: \"🦊 Connect to Metamask using the top right button.\",\r\n        };\r\n    }\r\n    } catch (err) {\r\n    return {\r\n        address: \"\",\r\n        status: \"😥 \" + err.message,\r\n    };\r\n    }\r\n} else {\r\n    return {\r\n    address: \"\",\r\n    status: (\r\n        <span>\r\n        <p>\r\n            {\" \"}\r\n            🦊{\" \"}\r\n            <a target=\"_blank\" href={`https://metamask.io/download.html`}>\r\n            You must install Metamask, a virtual Ethereum wallet, in your\r\n            browser.\r\n            </a>\r\n        </p>\r\n        </span>\r\n    ),\r\n    };\r\n}\r\n};\r\nexport const mintNFT = async(url, name, description) => {\r\n\r\n    //error handling\r\n    if (url.trim() == \"\" || (name.trim() == \"\" || description.trim() == \"\")) { \r\n        return {\r\n            success: false,\r\n            status: \"❗Please make sure all fields are completed before minting.\",\r\n        }\r\n    }\r\n\r\n    //make metadata\r\n    const metadata = new Object();\r\n    metadata.name = name;\r\n    metadata.image = url;\r\n    metadata.description = description;\r\n\r\n    //pinata pin request\r\n    const pinataResponse = await pinJSONToIPFS(metadata);\r\n    if (!pinataResponse.success) {\r\n        return {\r\n            success: false,\r\n            status: \"😢 Something went wrong while uploading your tokenURI.\",\r\n        }\r\n    } \r\n    const tokenURI = pinataResponse.pinataUrl;  \r\n\r\n    //load smart contract\r\n    window.contract = await new web3.eth.Contract(contractABI, contractAddress);//loadContract();\r\n\r\n    //set up your Ethereum transaction\r\n    const transactionParameters = {\r\n        to: contractAddress, // Required except during contract publications.\r\n        from: window.ethereum.selectedAddress, // must match user's active address.\r\n        'data': window.contract.methods.mintNFT(window.ethereum.selectedAddress, tokenURI).encodeABI() //make call to NFT smart contract \r\n    };\r\n\r\n    //sign transaction via Metamask\r\n    try {\r\n        const txHash = await window.ethereum\r\n            .request({\r\n                method: 'eth_sendTransaction',\r\n                params: [transactionParameters],\r\n            });\r\n        return {\r\n            success: true,\r\n            status: \"✅ Check out your transaction on Etherscan: https://mumbai.polygonscan.com/address/\" + txHash\r\n        }\r\n    } catch (error) {\r\n        return {\r\n            success: false,\r\n            status: \"😥 Something went wrong: \" + error.message\r\n        }\r\n    }\r\n}\r\nexport const fetchNFTs = async (owner, contractAddress, setNFTs, retryAttempt) => {\r\n  if (retryAttempt === 5) {\r\n      return;\r\n  }\r\n  if (owner) {\r\n      let data;\r\n      try {\r\n          if (contractAddress) {\r\n              data = await fetch(`${endpoint}/getNFTs?owner=${owner}&contractAddresses%5B%5D=${contractAddress}`).then(data => data.json())\r\n          } else {\r\n              data = await fetch(`${endpoint}/getNFTs?owner=${owner}`).then(data => data.json())\r\n          }\r\n      } catch (e) {\r\n          fetchNFTs(endpoint, owner, contractAddress, setNFTs, retryAttempt+1)\r\n      }\r\n      setNFTs(data.ownedNfts)\r\n      return data\r\n  }\r\n}\r\n\r\nexport const getExchange1 = async(url, name, description) => {\r\n\r\n  //error handling\r\n  if (url.trim() == \"\" || (name.trim() == \"\" || description.trim() == \"\")) { \r\n      return {\r\n          success: false,\r\n          status: \"❗Please make sure all fields are completed before minting.\",\r\n      }\r\n  }\r\n\r\n  //make metadata\r\n  const metadata = new Object();\r\n  metadata.name = name;\r\n  metadata.image = url;\r\n  metadata.description = description;\r\n\r\n  //pinata pin request\r\n  const pinataResponse = await pinJSONToIPFS(metadata);\r\n  if (!pinataResponse.success) {\r\n      return {\r\n          success: false,\r\n          status: \"😢 Something went wrong while uploading your tokenURI.\",\r\n      }\r\n  } \r\n  const tokenURI = pinataResponse.pinataUrl;  \r\n\r\n  //load smart contract\r\n  window.contract = await new web3.eth.Contract(contractABI, contractAddress);//loadContract();\r\n\r\n  //set up your Ethereum transaction\r\n  const transactionParameters = {\r\n      to: contractAddress, // Required except during contract publications.\r\n      from: window.ethereum.selectedAddress, // must match user's active address.\r\n      'data': window.contract.methods.mintNFT(window.ethereum.selectedAddress, tokenURI).encodeABI() //make call to NFT smart contract \r\n  };\r\n\r\n  //sign transaction via Metamask\r\n  try {\r\n      const txHash = await window.ethereum\r\n          .request({\r\n              method: 'eth_sendTransaction',\r\n              params: [transactionParameters],\r\n          });\r\n      return {\r\n          success: true,\r\n          status: \"✅ Check out your transaction on Etherscan: https://mumbai.polygonscan.com/address/\" + txHash\r\n      }\r\n  } catch (error) {\r\n      return {\r\n          success: false,\r\n          status: \"😥 Something went wrong: \" + error.message\r\n      }\r\n  }\r\n}","const NftCard = ({ image, id, title, address, description, attributes }) => {\r\n    console.log(attributes)\r\n    console.log(description)\r\n    console.log(id)\r\n    console.log(address)\r\n    return (\r\n        <div className=\"w-1/4 mr-3 mb-4 bg-slate-100 rounded-md\" >\r\n            <img className='w-full rounded-t-md' key={id} src={image}></img>\r\n            <div className=\"p-3\">\r\n                <div className=\"flex mb-3\">\r\n                    <div className=\"flex-grow\">\r\n                        <h3 className=\"text-xl\">{title}</h3>\r\n                        <p>{`${id.slice(0, 4)}...${id.slice(id.length - 4)}`}</p>\r\n                    </div>\r\n                    <div className=\"flex mr-3\">\r\n                        <a target=\"_blank\" className=\"text-blue-700\" href={`https://etherscan.io/token/${address}`}>{`${address.slice(0, 4)}...${address.slice(address.length - 4)}`}</a>\r\n                    </div>\r\n                </div>\r\n                <p>{description? description.slice(0, 200) : \"No Description\"}</p>\r\n            </div>\r\n            <div className=\"flex flex-wrap justify-center items-center p-3 \">\r\n                {attributes?.length > 0 && attributes.map(attribute => {\r\n                    return (\r\n                        <div className=\"w-1/2 mb-2 flex justify-start flex-col\">\r\n                            <p className=\"mr-2 font-bold\">{attribute.trait_type}:</p>\r\n                            <p className=\"text-sm\">{attribute.value}</p>\r\n                        </div>\r\n                    )\r\n                })}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default NftCard","import { useEffect, useState } from \"react\";\r\nimport { connectWallet, getCurrentWalletConnected, mintNFT ,fetchNFTs} from \"./utils/interact.js\";\r\n\r\nimport NftCard from './components/nftcard';\r\n\r\nconst Minter = (props) => {\r\n  //State variables\r\n  const [walletAddress, setWallet] = useState(\"\");\r\n  const [status, setStatus] = useState(\"\");\r\n  const [name, setName] = useState(\"\");\r\n  const [description, setDescription] = useState(\"\");\r\n  const [url, setURL] = useState(\"\");\r\n\r\n  const [owner, setOwner] = useState(\"\")\r\n  const [contractAddress, setContractAddress] = useState(\"\")\r\n  const [NFTs, setNFTs] = useState(\"\")\r\n  \r\n  \r\n  useEffect(async () => {\r\n    const {address, status} = await getCurrentWalletConnected();\r\n    setWallet(address)\r\n    setStatus(status); \r\n\r\n    addWalletListener();\r\n    if (address.length > 0) {\r\n      fetchNFTs(address, '0x7fFE2FdA8c162b84842E7Ddd08fc0CBbdce925f3', setNFTs )\r\n    } else{\r\n      setNFTs(\"\")\r\n    }\r\n  }, []);\r\n\r\n  const connectWalletPressed = async () => {\r\n    const walletResponse = await connectWallet();\r\n    setStatus(walletResponse.status);\r\n    setWallet(walletResponse.address);\r\n  };\r\n\r\n  const onMintPressed = async () => {\r\n    const { status } = await mintNFT(url, name, description);\r\n    setStatus(status);\r\n};\r\n  \r\n\r\n  function addWalletListener() {\r\n    if (window.ethereum) {\r\n      window.ethereum.on(\"accountsChanged\", (accounts) => {\r\n        if (accounts.length > 0) {\r\n          setWallet(accounts[0]);\r\n          setStatus(\"👆🏽 Write a message in the text-field above.\");\r\n          fetchNFTs(accounts[0], '0x7fFE2FdA8c162b84842E7Ddd08fc0CBbdce925f3', setNFTs )\r\n        } else {\r\n          setWallet(\"\");\r\n          setStatus(\"🦊 Connect to Metamask using the top right button.\");\r\n          setNFTs(\"\");\r\n        }\r\n      });\r\n    } else {\r\n      setStatus(\r\n        <p>\r\n          {\" \"}\r\n          🦊{\" \"}\r\n          <a target=\"_blank\" href={`https://metamask.io/download.html`}>\r\n            You must install Metamask, a virtual Ethereum wallet, in your\r\n            browser.\r\n          </a>\r\n        </p>\r\n      );\r\n    }\r\n  }\r\n  return (\r\n    <div className=\"Minter\">\r\n      <button id=\"walletButton\" onClick={connectWalletPressed}>\r\n        {walletAddress.length > 0 ? (\r\n          \"Connected: \" +\r\n          String(walletAddress).substring(0, 6) +\r\n          \"...\" +\r\n          String(walletAddress).substring(38)\r\n        ) : (\r\n          <span>Connect Wallet</span>\r\n        )}\r\n      </button>\r\n\r\n      <br></br>\r\n      <h1 id=\"title\">🧙‍♂️ Alchemy NFT Minter</h1>\r\n      <p>\r\n        Simply add your asset's link, name, and description, then press \"Mint.\"\r\n      </p>\r\n      <form>\r\n        <h2>🖼 Link to asset: </h2>\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"e.g. https://gateway.pinata.cloud/ipfs/<hash>\"\r\n          onChange={(event) => setURL(event.target.value)}\r\n        />\r\n        <h2>🤔 Name: </h2>\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"e.g. My first NFT!\"\r\n          onChange={(event) => setName(event.target.value)}\r\n        />\r\n        <h2>✍️ Description: </h2>\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"e.g. Even cooler than cryptokitties ;)\"\r\n          onChange={(event) => setDescription(event.target.value)}\r\n        />\r\n      </form>\r\n      <button id=\"mintButton\" onClick={onMintPressed}>\r\n        Mint NFT\r\n      </button>\r\n      <p id=\"status\">\r\n        {status}\r\n      </p>\r\n      <div>            \r\n        <section className='flex flex-wrap justify-center'>\r\n                {\r\n                    NFTs ? NFTs.map(NFT => {\r\n                       \r\n                        return (\r\n                           <NftCard image={NFT.media[0].gateway} id={NFT.id.tokenId } title={NFT.title} address={NFT.contract.address} description={NFT.description} attributes={NFT.metadata.attributes} ></NftCard>\r\n                        )\r\n                    }) : <div>No NFTs found</div>\r\n                }\r\n        </section>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Minter;\r\n","// Go to www.alchemy.com and create an account to grab your own api key!\r\nconst apiKey = \"HUwsHlHESRAQuOHJ0qTVfet2P2g644V6\";\r\nconst endpoint = `https://polygon-mumbai.g.alchemy.com/v2/${apiKey}`;\r\n\r\nexport const fetchNFTs = async (owner, contractAddress, setNFTs, retryAttempt) => {\r\n    if (retryAttempt === 5) {\r\n        return;\r\n    }\r\n    if (owner) {\r\n        let data;\r\n        try {\r\n            if (contractAddress) {\r\n                data = await fetch(`${endpoint}/getNFTs?owner=${owner}&contractAddresses%5B%5D=${contractAddress}`).then(data => data.json())\r\n            } else {\r\n                data = await fetch(`${endpoint}/getNFTs?owner=${owner}`).then(data => data.json())\r\n            }\r\n        } catch (e) {\r\n            fetchNFTs(endpoint, owner, contractAddress, setNFTs, retryAttempt+1)\r\n        }\r\n        console.log(data)\r\n        setNFTs(data.ownedNfts)\r\n        return data\r\n    }\r\n}\r\n\r\n","import './App.css';\r\nimport Minter from './Minter'\r\nimport Explore from './pages/explore';\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Minter></Minter>\r\n      {/* <Explore></Explore> */}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}